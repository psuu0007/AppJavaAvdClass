능력단위: 화면설계

@소프트웨어 아키텍처?
소프트트웨어 아키텍처는 개발하고자 하는 소프트웨어의 사전 작업을 통하여
소프트웨어 개발을 쉽게 하도록 기본 틀을 만드는 것으로,
복잡한 개발을 체계적으로 접근하기 위한 밑그림이라 할 수 있다.
소프트웨어를 구성하는 컴포넌트들의 상호 작용 및 관계, 각각의 특성을 기반으로
컴포넌트들이 상호 유기적으로 결합하는 소프트웨어의 진화를 위한 여러 가지
원칙들의 집합이라고 할 수 있다.

UI(User Interface)?   UX(User Experience)?
사용자와 컴퓨터 상호 간이 소통을 원활히 하게 도와주는 연계 작업

업무가 복잡해지고 다양해지면서 단순한 방법으로는 많은 문제점이 발생함에 따라
오류를 줄이기 위한 방법으로 현재에는 작업 수행 내역을 구체적으로 작성하는 
기능 위주에서 단순한 기능 전달이 아닌 정보의 내용과 그 안에 포함된 뜻을
전달하는 표현 방법으로 변화하였다.


UI의 세 가지 분야
정보 제공과 기능 전달을 위한 물리적 제어 분야
콘텐츠의 상세적 표현과 전체적 구성에 관한 분야
사용자의 편의성에 맞춰 쉽고 간편하게 사용 가능하게 하는 기능적 분야

UI의 설계 원칙
@직관성: 누구나 쉽게 이해하고 사용할 수 있어야 한다
@유효성: 사용자의 목적을 정확하게 전달하여야 한다
@학습성: 누구나 쉽게 배우고 익힐 수 있어야 한다
@유연성: 사용자의 요구사항을 최대한 수용하며, 오류를 최소화하여야 한다

UI의 설계 지침
@사용자 중심: 사용자가 이해하기 편하고 쉽게 사용할 수 있는 환경을 제공하며
실사용자에 대한 이해가 바탕이 되어야 한다
@일관성: 버튼이나 조작 방법을 사용자가 기억하기 쉽고 빠른 습득이 가능하게 
설계해야 한다
@단순성: 조작 방법은 가장 간단하게 작동이 가능하도록 하여 인지적 부담을
감소시켜야 한다
@결과 예측 가능: 작동시킬 기능만 보고도 결과 예측이 가능하여야 한다
@가시성 : 주요 기능을 메인 화면에 노출하여 조작이 쉽도록 하여야 한다
@표준화: 디자인을 표준화하여 기능 구조의 선행 학습 이후 
쉽게 사용할 수 있어야 한다
@접근성: 사용자의 직무, 연령, 성별 등 다양한 계층을 수용하여야 한다
@명확성: 사용자가 개념적으로 쉽게 인지하여야 한다
@오류 발생 해결: 사용자가 오류에 대한 상황을 정확히 인지할 수 있어야 한다

UI가 필요한 이유
@구현하고자 하는 결과의 오류를 최소화하고 적은 노력으로 구현하는 결과를 얻을 수 있다
@막연한 작업 기능에 대해 구체적인 방법을 제시하여 준다
@사용자의 편의성을 높임으로써 작업 시간 단축과 업무에 대한 이해도를 높여 준다
@정보 제공자와 공급자의 원활하고 쉬운 매개 역할을 수행한다.


품질 요구사항
기능성: 요구된 기능이 제공되는가?
신뢰성: 믿을만한 소프트웨어인가?
사용성: 사용하기 쉬운 소프트웨어인가?
효율성: 얼마나 효율적인 소프트웨어인가?
이식성: 수정이 용이한 소프트웨어인가?
유지보수성: 환경 전환이 용이한가?


UI 요구사항 확인
프로젝트의 요구사항은 크게 시스템이 무엇을 해야 하는지를 설명하는
기능적 요구사항(Function Requirements)과 개발 과정에서 지켜져야 할
제약조건들을 설명하는 비기능적 요구사항(Nonfunction Requirements)으로 나눠진다

1기능적 요구사항
@시스템의 입력으로 무엇이 포함되어야 하나?
@시스템의 출력으로 무엇이 포함되어야 하나?
@시스템이 어떤 데이터를 저장해야 하나?
@시스템이 어떤 연산을 수행해야 하나?
@기타 요구사항(예: 동기화 등)

2비기능적 요구사항
@사용성, 효율성, 신뢰성, 유지 보수성, 재사용성 등 품질에 관한 요구사항
@플랫폼, 사용 기술 등 시스템 환경에 관한 요구사항
@비용, 일정등 프로젝트 계획에 관한 요구사항



프레임(Frame)과 레이아웃(Layout) 관계

레이아웃 정의
@화면 구조를 정의한다
기본 배치(Layout)는 크게 Top, Left, Contents(Body) 영역의 
3개 부분으로 설계하며, 하단 메뉴 구성(Footer or Bottom Area)은
상황에 맞게 추가하거나 제외해도 된다.

@상단 메뉴 구성(Top Area)을 정의한다
필수적으로 적용하는 사항이며, 구성 요소로는 시스템 로고,
로그인, 바로가기 메뉴(Quick Menu), 주 메뉴(Main Navagation)가 있다.
시스템 전체 페이지에 동일하게 적용되며 변경이나 추가가 필요한 경우 
주 메뉴 크기만 변경 가능하게 한다.

1.시스템 로고
웹 사이트 전체에 일관성 있게 구현한다. 시스템 로고에 링크를 걸어 
메인 화면으로 이동 가능하게 한다.
2.로그인 정보
화면 우측 상단에 위치하며, 접속자에 대한 정보를 표시(Display)한다.
예: [홍길동]님 로그인
3.바로가기 메뉴
상단에 위치하며, home, manual, admin 등 
화면(site) 전반에 걸친 메뉴를 우측 정렬로 배치한다
4.Navigation
우측 상단에 위치하며, 시스템의 주 메뉴를 왼쪽 정렬로 배치한다.
마우스 오버 시 해당 메뉴의 배경 화면색 혹은 글자색이 변경되도록 한다.
각 항목의 폭(width)은 일정하게 유지한다.

@좌측 메뉴 구성(Left Area)을 정의한다
선택적으로 적용하는 사항이며, 구성 요소로는 서브 메뉴(Sub Menu),
배너(Babber)가 있다. 시스템별 서브 페이지에 선택 적용한다.

1.내용 구성(Content Area, body)을 정의한다
필수적으로 적용하는 사항이며, 구성 요소로는 메인 이미지, 시스템별 구성 내용이 있다.
시스템의 전체 콘셉트를 나타내는 메인 이미지와 시스템별로 필요한 컨텐츠를 
적용하는 곳으로 유동성 있게 구성이 가능하다
2.하단 메뉴 구성(Footer Area)을 정의한다.
선택적으로 적용하는 사항이며, 구성 요소로는 회사 CI, Copyright가 있다.
회사 상황에 맞춰 적용 및 삭제 가능하다
3.사용 환경에 맞춰 페이지 폭을 정의한다.
브라우저 사이즈에 따라 페이지 폭 크기(Width Size)를 유동적으로 적용하여 
화면 활용도를 높이는 것을 기본으로 한다.

@네비게이션을 정의한다
1메뉴 네비게이션을 정의한다
메뉴 네비게이션은 4가지 타입의 응용 프로그램의 메뉴 구조에 따라 적당한 
타입을 선택하여 적용한다.

@기능을 정의한다
시스템 요구사항에 대한 개념 모델을 논리적 모델
(프로세스 모델, UI설계, 논리 데이터 모델, 아키텍처 정의, 인터페이스 설계 측면)로
상세화한다.



목표, 인터뷰, 활동
@요구사항 작성
1요구사항 요소를 확인한다
데이터 요구: 사용자가 요구하는 모델과 객체들의 주용한 특성에 기반한 데이터 객체들을
정리한다. 인터페이스에 영향을 주므로 초기에 확인해야 한다
ex) 이메일의 메시지 속성에는 제목, 발신일, 발신인, 답변

2기능 요구: 사용자의 목적 달성을 위해 무엇을 실행해야 하는지를 
동사형으로 설명한다. 기능 요구 리스트로 정리하며, 최대한 철저하게 해야한다.
ex)마드모아젤은 이메일의 메시지 내용을 읽거나 삭제하며, 일정한 양식으로
다른 메시지와 함께 보관한다.

3제품, 서비스의 품질: 데이터 및 기능 요구 외에 중요하게 고려할 몇 개의 
속성은 제품 품질이 있으며, 여기에는 감성적인 품질도 고려한다.
ex)시스템이 얼마나 빨리 파일을 처리하는지 여부와 같이 실용적이며 정량화
가능한 요구사항들을 확인한다.

4제약사항: 제품 출시의 데드라인, 개발 및 제작에 드는 비용, 시스템 준수에
필요한 규제가 포함되며, 사전에 제약사항의 변경 여부(변경 가능, 변경 불가)를
확인한다

@정황 시나리오를 작성한다
1.요구사항 정의의 가장 기초적인 시나리오를 듯하는 것으로, 높은 수준과 
낙관적인 상황에서의 이상적인 시스템 작동에 초점을 맞춘다.
개발하는 서비스의 모습을 상상하는 단계이며,
사용자 관점에서 시나리오를 작성한다
2.사용자가 주로 사용하는 기능 위주로 작성하여야 하며, 같이 동작하는 기능들은
하나의 시나리오에 통합한다.
3.정리된 리스트를 기반으로 사용자의 관점에서 서술한다. 육하원칙에 따르고 
간결하고 명확하게 작성하여 정확하게 전달한다.
4.작성된 시나리오는 외부 전문가 또는 경험이 풍부한 사람에게 검토를 의뢰한다


1-2 UI 프로토타입 제작, 검토
프로토타입(Prototype) 뜻
프로토타입은 원래의 온전한 형태, 전형적인 예, 기초적인 표준이다.
시제품 전의 제품 원형으로 개발 검증과 양산 검증의 과정을 거쳐 시제품이 완성된다.
프로토타입은 "새로운 컴퓨터 시스템이나 소프트웨어의 설계 또는 성능, 구현 가능성,
운용 가능성을 평가하거나 요구 사항을 좀 더 잘 이해하고 결정하기 위하여 전체적인 
기능을 간략한 형태로 구현한 제품이다."
프로토타입은 사용자의 요구사항이 모두 정확하게 반영될 때까지 계속하여
개선, 보완된다. 실제 수많은 애플리케이션들이 프로토타입의 지속적인 확장,
보강을 통해 최종 설계가 완성된다.


작성 도구 선정
아날로그: 화이트보드, 펜, 종이를 이용   - 손으로 직접 작성

디지털: 파워포인트, 어도비, html, mockUp 등 - 툴을 사용하여 작성

@프로토타입 유의 사항
프로토타입은 작은 범위와 적은 인원을 가지고 최소 기간 내에 위험 요소를 
식별하고 해결하는 것이 중요하다. 가급적 프로토타입에 투입되는 기간 및 비용을
최소화하여 목적을 달성할 수 있도록 계획하는 것이 좋다.
검증할 범위를 너무 넓게 잡거나 기간을 많이 잡으면 원하는 목표가 너무 커져서
오히려 문제가 될 수도 있으므로 주의해야 한다.

@프로토타입 이슈 및 해결
프로토타입을 통해서 발생하는 이슈를 모두 취합하여 보고한다.
프로토타입에서 나오는 이슈의 대부분은 아키텍처 요소 검증 중에 발생하며
분석, 설계 이슈와 개발 환경 등의 이슈가 추가될 수 있다.
프로토타입은 이슈가 많이 발생할수록 좋은 것이다. 따라서 
프로토타입을 통해서 발생한 이슈와 해결한 이슈의 종류별 개수를 취합하여 
결과 보고하는 것이 좋다.
프로토타입 리더가 날마다 이슈를 취합하고 해결 방법을 제시한다.
이것을 모두 정리하여 결과 보고에 반영한다.

























































































 



 






























































